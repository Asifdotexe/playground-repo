# i wanted a way to automatically check our python code for style issues
# on every push, but not on the main branch, because that felt a bit noisy.
# this whole thing is meant to give us gentle reminders in pull requests.

name: Python Linting Bot

# i decided to trigger this on pushes to any branch that isn't `main`.
# my thinking was that we want to catch things before they get merged,
# and running it on `main` itself seemed redundant and could get annoying.
on:
  push:
    branches:
      - '*'      # run on all branches
      - '!main'    # exclude main branch

# okay, so i had to give this workflow a bunch of permissions.
# it felt a bit much at first, but it needs them to do its job –
# things like writing to the repo to create branches, making pull requests,
# and posting comments. it's all about letting the bot interact with our stuff.
permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: read

jobs:
  python-linting:
    name: Python Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      # first things first, we need to actually get the code.
      # this step just checks out the repository so the workflow can see our files.
      # i set `fetch-depth: 0` because i remember running into issues where
      # the action couldn't handle branches properly without the full history.
      # the token is just for authentication, pretty standard stuff.
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # now, let's get python ready.
      # i chose python '3.11' because it was recent and stable when i wrote this.
      # hopefully, it's still a good choice. if not, future me, you know what to do.
      # this step makes sure we have a python environment to run our tools in.
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # i went with ruff for our linter.
      # honestly, it's just so much faster than other tools i've used,
      # and it rolls a bunch of linters into one, which i thought was neat.
      # this just installs it using pip. pretty straightforward.
      - name: 📦 Install Ruff Linter
        run: |
          pip install ruff
          echo "✅ Ruff installation completed"

      # i needed a way to figure out what branch we're on.
      # this little script just pulls the branch name from the github context.
      # we'll need this later to create the pull request and make comments.
      - name: 🔍 Get Branch Information
        id: branch-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Current branch: $BRANCH_NAME"

      # i really didn't want the bot to create a new pull request every single time we push.
      # that would be a nightmare. so, this step uses the github cli to see
      # if there's already an open pr for this branch. it saves us a lot of clutter.
      - name: 🔎 Check for Existing Pull Request
        id: check-pr
        run: |
          PR_NUMBER=$(gh pr list --head "${{ steps.branch-info.outputs.branch-name }}" --state open --json number --jq '.[0].number // empty')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Found existing PR #$PR_NUMBER"
            echo "pr-exists=true" >> $GITHUB_OUTPUT
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found"
            echo "pr-exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # this step only runs if the last one didn't find a pull request.
      # it's my way of making sure we only create a pr when we need one.
      # i automated the title and body to keep things consistent.
      # i also assigned it to whoever pushed the code, which felt like the right thing to do.
      - name: 🚀 Create Pull Request
        if: steps.check-pr.outputs.pr-exists == 'false'
        id: create-pr
        run: |
          PR_TITLE="[AUTO] Linting & Review for ${{ steps.branch-info.outputs.branch-name }}"
          PR_BODY="This PR was automatically opened by our linting bot to review recent changes."
          
          PR_NUMBER=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.branch-info.outputs.branch-name }}" \
            --assignee "${{ github.actor }}" \
            | grep -o '#[0-9]\+' | sed 's/#//')
          
          echo "Created new PR #$PR_NUMBER"
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # here's where the magic happens. we're running ruff.
      # i added a check to see if there are even any python files first,
      # because i remember it erroring out on repos without them.
      # i also put in a fallback for the output format. sometimes the github one can be a bit finicky,
      # so if it fails, it just tries the default format. the `--exit-zero` is important;
      # i didn't want the whole workflow to fail just because of a linting issue.
      # the point is to be helpful, not to be a blocker.
      - name: 🔍 Run Ruff Linting
        id: ruff-check
        run: |
          echo "Starting Ruff linting process..."
          
          LINT_OUTPUT_FILE="ruff_results.txt"
          
          PYTHON_FILES=$(find . -name "*.py" -type f -not -path "./.git/*" | wc -l)
          echo "Found $PYTHON_FILES Python files to analyze"
          
          if [ "$PYTHON_FILES" -eq 0 ]; then
            echo "No Python files found to lint"
            echo "has-issues=false" >> $GITHUB_OUTPUT
            echo "lint-output-file=$LINT_OUTPUT_FILE" >> $GITHUB_OUTPUT
            echo "python-files-count=0" >> $GITHUB_OUTPUT
            touch "$LINT_OUTPUT_FILE"
            exit 0
          fi
          
          echo "Running Ruff linter..."
          
          if ruff check . --output-format=github --exit-zero > "$LINT_OUTPUT_FILE" 2>&1; then
            echo "Ruff completed successfully with GitHub format"
          else
            echo "GitHub format failed, trying default format"
            ruff check . --exit-zero > "$LINT_OUTPUT_FILE" 2>&1 || true
          fi
          
          echo "Ruff output file size: $(wc -c < "$LINT_OUTPUT_FILE")"
          if [ -s "$LINT_OUTPUT_FILE" ]; then
            echo "Ruff output preview:"
            head -n 5 "$LINT_OUTPUT_FILE" || echo "Could not preview file"
          fi
          
          if [ -s "$LINT_OUTPUT_FILE" ] && grep -q "[^[:space:]]" "$LINT_OUTPUT_FILE"; then
            echo "Linting issues found"
            echo "has-issues=true" >> $GITHUB_OUTPUT
          else
            echo "No linting issues found"
            echo "has-issues=false" >> $GITHUB_OUTPUT
          fi
          
          echo "lint-output-file=$LINT_OUTPUT_FILE" >> $GITHUB_OUTPUT
          echo "python-files-count=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "✅ Ruff linting completed"

      # so, the raw output from ruff isn't super pretty for a pr comment.
      # this step takes that output and makes it a bit more human-friendly.
      # i tried to make the message encouraging, whether there are issues or not.
      # parsing the output was a bit of a pain, i'll be honest. i'm using some bash
      # to try and format it nicely. hopefully, it holds up.
      - name: 📋 Process Linting Results
        id: process-results
        run: |
          LINT_FILE="${{ steps.ruff-check.outputs.lint-output-file }}"
          COMMENT_FILE="pr_comment.md"
          
          echo "Processing linting results..."
          echo "Lint file: $LINT_FILE"
          echo "Has issues: ${{ steps.ruff-check.outputs.has-issues }}"
          
          cat > "$COMMENT_FILE" << 'EOF'
          Hello there! 👋 I've taken a look at your recent code push and have a few friendly suggestions to help keep our codebase clean and consistent.
          
          EOF
          
          if [ "${{ steps.ruff-check.outputs.has-issues }}" == "true" ]; then
            echo "📝 **Linting Suggestions**" >> "$COMMENT_FILE"
            echo "" >> "$COMMENT_FILE"
            echo "Here are the details:" >> "$COMMENT_FILE"
            echo "" >> "$COMMENT_FILE"
            
            echo "Contents of lint file:"
            if [ -f "$LINT_FILE" ]; then
              cat "$LINT_FILE" || echo "Could not read lint file"
            else
              echo "Lint file does not exist"
            fi
            
            if [ -f "$LINT_FILE" ] && [ -s "$LINT_FILE" ]; then
              echo "Parsing lint results..."
              
              while IFS= read -r line; do
                if [[ "$line" == *"::error"* ]] && [[ "$line" == *"file="* ]]; then
                  if [[ "$line" =~ file=([^,]+),line=([0-9]+) ]]; then
                    file_path="${BASH_REMATCH[1]}"
                    line_num="${BASH_REMATCH[2]}"
                    
                    message=$(echo "$line" | sed 's/.*:://')
                    
                    echo "* **File:** \`$file_path\`" >> "$COMMENT_FILE"
                    echo "  * **Line $line_num:** $message" >> "$COMMENT_FILE"
                    echo "" >> "$COMMENT_FILE"
                  fi
                elif [[ "$line" == *".py:"* ]]; then
                  echo "* $line" >> "$COMMENT_FILE"
                fi
              done < "$LINT_FILE"
            else
              echo "* No specific issues found in the lint output file." >> "$COMMENT_FILE"
              echo "" >> "$COMMENT_FILE"
            fi
          else
            echo "🎉 **Great News!**" >> "$COMMENT_FILE"
            echo "" >> "$COMMENT_FILE"
            echo "Your code looks fantastic! No linting suggestions at this time." >> "$COMMENT_FILE"
            echo "" >> "$COMMENT_FILE"
          fi
          
          echo "✨ These are just suggestions to help us all write better code! Keep up the fantastic work." >> "$COMMENT_FILE"
          echo "" >> "$COMMENT_FILE"
          echo "---" >> "$COMMENT_FILE"
          echo "🤖 *This comment was automatically generated by the Python Linting Bot*" >> "$COMMENT_FILE"
          echo "📊 *Analyzed ${{ steps.ruff-check.outputs.python-files-count }} Python files*" >> "$COMMENT_FILE"
          
          echo "Generated comment:"
          cat "$COMMENT_FILE"
          
          echo "comment-file=$COMMENT_FILE" >> $GITHUB_OUTPUT
          echo "✅ Comment processing completed"

      # now that we have our nicely formatted comment, it's time to post it.
      # this step figures out which pr to post to (either the one we found or the one we just created)
      # and uses the github cli to add the comment.
      - name: 💬 Post Linting Comment
        run: |
          if [ "${{ steps.check-pr.outputs.pr-exists }}" == "true" ]; then
            PR_NUMBER="${{ steps.check-pr.outputs.pr-number }}"
          else
            PR_NUMBER="${{ steps.create-pr.outputs.pr-number }}"
          fi
          
          echo "Posting comment to PR #$PR_NUMBER"
          
          gh pr comment "$PR_NUMBER" --body-file "${{ steps.process-results.outputs.comment-file }}"
          
          echo "✅ Comment posted successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # i wanted a quick summary at the end of the run, just to see what happened.
      # this gives us a little report on what branch was checked, how many files,
      # and whether a pr was created or updated.
      # and again, i made sure this step always passes. the last thing i want is for
      # this helpful little bot to become a roadblock.
      - name: 📊 Linting Summary
        run: |
          echo "🔍 Python Linting Bot Summary:"
          echo "  • Branch: ${{ steps.branch-info.outputs.branch-name }}"
          echo "  • Python files analyzed: ${{ steps.ruff-check.outputs.python-files-count }}"
          echo "  • Issues found: ${{ steps.ruff-check.outputs.has-issues }}"
          
          if [ "${{ steps.check-pr.outputs.pr-exists }}" == "true" ]; then
            echo "  • Updated existing PR #${{ steps.check-pr.outputs.pr-number }}"
          else
            echo "  • Created new PR #${{ steps.create-pr.outputs.pr-number }}"
          fi
          
          echo "✅ Linting process completed successfully!"
          
          exit 0
